image: alpine

stages:
  - version
  - test
  - build
  - publish

variables:
  RUST_DOCKER_IMAGE_VERSION: "1.61"
  VERSION_FILE: VERSION_FILE

before_script:
  - set -xe

.version:template: &version_template
  stage: version
  image: node:alpine
  script:
    - &version_script |
      apk add --update --no-cache git
      export VERSION=$(git describe --tags 2> /dev/null || echo 0.0.0)
  artifacts:
    paths:
      - ${VERSION_FILE}
    expire_in: 60 mins

version:branches:
  <<: *version_template
  script:
    - *version_script
    - ./version.sh branches > ${VERSION_FILE}
  only:
    - branches
  except:
    - master

version:master:
  <<: *version_template
  script:
    - *version_script
    - npm install -g semver
    - ./version.sh master > ${VERSION_FILE}
  only:
    - master

version:tags:
  <<: *version_template
  script:
    - VERSION=${CI_COMMIT_TAG} ./version.sh tags > ${VERSION_FILE}
  only:
    - tags
  except:
    - latest

test:rustfmt:
  stage: test
  image: rust:${RUST_DOCKER_IMAGE_VERSION}
  before_script:
    - rustup component add rustfmt
  script:
    - rustc --version && cargo --version
    - cargo fmt -- --check
  only:
    - branches

test:cargo:
  stage: test
  image: rust:${RUST_DOCKER_IMAGE_VERSION}
  script:
    - rustc --version && cargo --version
    - cargo test --all --verbose
  only:
    - branches

.build:template: &build_template
  stage: build
  image: japaric/$TARGET
  script:
    - sed -i "s/version = \"0.0.0\"/version = \"$(cat "${VERSION_FILE}")\"/" Cargo.toml
    - apt update
    - apt install -y curl
    - curl https://sh.rustup.rs -sSf | sh -s -- -y
    - source $HOME/.cargo/env
    - rustup show
    - rustup target add $TARGET
    - cargo build --release --target $TARGET
  except:
    - master
    - latest

build:x86_64-unknown-linux-musl:
  <<: *build_template
  variables:
    TARGET: x86_64-unknown-linux-musl

publish:crates:
  stage: publish
  image: rust:${RUST_DOCKER_IMAGE_VERSION}
  script:
    - sed -i "s/version = \"0.0.0\"/version = \"$(cat "${VERSION_FILE}")\"/" Cargo.toml
    - cargo login ${CRATES_IO_API_TOKEN}
    - cargo publish --allow-dirty
  only:
    - tags
  except:
    - latest

# # Generates a new tag from commits to master
publish:tag:
  stage: publish
  image: node:alpine
  script:
    - apk add --update --no-cache curl
    - npm install -g semver
    - curl -qsX POST -H "Private-Token:${GITLAB_API_TOKEN}" -F ref="${CI_COMMIT_REF_NAME}" -F tag_name="$(cat "${VERSION_FILE}")" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" > /dev/null 2>&1
  only:
    - master

# # Updates the 'latest' tag to be equivalent to the last created tag
publish:latest:
  stage: publish
  script:
    - apk add --update --no-cache curl
    - curl -qsX DELETE -H "Private-Token:${GITLAB_API_TOKEN}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags/latest" > /dev/null 2>&1
    - curl -qsX POST -H "Private-Token:${GITLAB_API_TOKEN}" -F ref="${CI_COMMIT_TAG}" -F tag_name=latest "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" > /dev/null 2>&1
  only:
    - tags
  except:
    - latest
